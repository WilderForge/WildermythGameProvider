plugins {
	id 'java-library'
	id 'eclipse'
	id 'maven-publish'
	id ('com.gradleup.shadow') version "8.3.3"
}

repositories {
	mavenCentral()
	maven {
		url "https://repo.spongepowered.org/maven/"
	}
	maven {
		url "https://maven.fabricmc.net/"
	}
	maven {
		url "https://maven.wildermods.com"
	}
	mavenLocal()
}

sourceCompatibility = '17'
targetCompatibility = '17'

version = providerVersion
group = "com.wildermods"
archivesBaseName = "provider"

dependencies {

	compileOnly libs.fabric.loader

	//mixin requirements:
	compileOnly libs.mixin
	
	compileOnly libs.asm
	compileOnly libs.asm.analysis
	compileOnly libs.asm.commons
	compileOnly libs.asm.tree
	compileOnly libs.asm.util
	
	compileOnly libs.log4j.core
	compileOnly libs.log4j.api
	compileOnly libs.log4j.slf4j2.impl
	
	implementation(libs.commons.lang) {
		transitive = false
	}
}

jar {
	manifest {
		attributes(
			'Main-Class': 'net.fabricmc.loader.impl.launch.knot.KnotClient',
			'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
			'Multi-Release': 'true'
		)
	}
}

tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	exclude '**/license.txt'
	exclude '**/license'
	exclude '**/notice.txt'
	exclude '**/notice' 
	exclude '**/LICENSE.txt'
	exclude '**/LICENSE'
	exclude '**/NOTICE.txt'
	exclude '**/NOTICE' 
	finalizedBy sourceJar
}

ext.mavenLocalUrl = repositories.mavenLocal().url.toString()

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
}

tasks.register('checkArtifactExists') {
    doLast {
	// Skip this task if --force is present
	if (project.hasProperty('force')) {
		logger.lifecycle("Skipping artifact existence check due to --force flag.")
		return
	}
        def repoUrl = project.hasProperty('mavenRepoUrl') ? project.mavenRepoUrl : mavenLocalUrl
        def artifactPath = "${repoUrl}/${project.group.replace('.', '/')}/${project.archivesBaseName}/${project.version}/${project.archivesBaseName}-${project.version}.jar"
        logger.lifecycle("Checking if artifact exists at: $artifactPath")
        
        if (artifactPath.startsWith('file:/')) {
            // Handle file URLs
            def file = new File(new URI(artifactPath))
            if (file.exists()) {
                throw new IllegalStateException("Artifact '${project.group}:${project.archivesBaseName}:${project.version}' already exists. Publishing aborted.")
            }
        } else {
            // Handle HTTP URLs
            def url = new URL(artifactPath)
            def connection = url.openConnection()
            connection.setRequestMethod('HEAD')
            if (connection.responseCode == 200) {
				throw new IllegalStateException("Artifact '${project.group}:${project.archivesBaseName}:${project.version}' already exists. Publishing aborted.")
            }
        }
        logger.lifecycle("Artifact does not exist, proceeding with publish.")
    }
}

tasks.named('publish') {
    dependsOn 'checkArtifactExists'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            // Attach sources JAR to the publication
            artifact sourceJar
        }
    }

    repositories {
        maven {
            url = uri(project.hasProperty('mavenRepoUrl') ? project.mavenRepoUrl : mavenLocalUrl) // Default to mavenLocal if no custom URL is provided
        }
    }
}
